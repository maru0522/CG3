#include "Object3d.h"
#include <d3dcompiler.h>
#include <DirectXTex.h>

#pragma comment(lib, "d3dcompiler.lib")

using namespace DirectX;
using namespace Microsoft::WRL;

/// <summary>
/// 静的メンバ変数の実体
/// </summary>
const float Object3d::radius = 5.0f;				// 底面の半径
const float Object3d::prizmHeight = 8.0f;			// 柱の高さ
ID3D12Device* Object3d::device = nullptr;
UINT Object3d::descriptorHandleIncrementSize = 0;
ID3D12GraphicsCommandList* Object3d::cmdList = nullptr;
ComPtr<ID3D12RootSignature> Object3d::rootsignature;
ComPtr<ID3D12PipelineState> Object3d::pipelinestate;
ComPtr<ID3D12DescriptorHeap> Object3d::descHeap;
ComPtr<ID3D12Resource> Object3d::vertBuff;
//ComPtr<ID3D12Resource> Object3d::indexBuff;
ComPtr<ID3D12Resource> Object3d::texbuff;
CD3DX12_CPU_DESCRIPTOR_HANDLE Object3d::cpuDescHandleSRV;
CD3DX12_GPU_DESCRIPTOR_HANDLE Object3d::gpuDescHandleSRV;
XMMATRIX Object3d::matView{};
XMMATRIX Object3d::matProjection{};
//XMFLOAT3 Object3d::eye = { 0, 0, -50.0f };
XMFLOAT3 Object3d::eye = { 0, 0, -5.0f };
XMFLOAT3 Object3d::target = { 0, 0, 0 };
XMFLOAT3 Object3d::up = { 0, 1, 0 };
D3D12_VERTEX_BUFFER_VIEW Object3d::vbView{};
//D3D12_INDEX_BUFFER_VIEW Object3d::ibView{};
//Object3d::VertexPosNormalUv Object3d::vertices[vertexCount];
Object3d::VertexPos Object3d::vertices[vertexCount];
//unsigned short Object3d::indices[indexCount];

XMMATRIX Object3d::matBillboard = XMMatrixIdentity();
XMMATRIX Object3d::matBillboardY = XMMatrixIdentity();

void Object3d::StaticInitialize(ID3D12Device* device, int window_width, int window_height)
{
    // nullptrチェック
    assert(device);

    Object3d::device = device;

    // デスクリプタヒープの初期化
    InitializeDescriptorHeap();

    // カメラ初期化
    InitializeCamera(window_width, window_height);

    // パイプライン初期化
    InitializeGraphicsPipeline();

    // テクスチャ読み込み
    LoadTexture();

    // モデル生成
    CreateModel();

}

void Object3d::PreDraw(ID3D12GraphicsCommandList* cmdList)
{
    // PreDrawとPostDrawがペアで呼ばれていなければエラー
    assert(Object3d::cmdList == nullptr);

    // コマンドリストをセット
    Object3d::cmdList = cmdList;

    // パイプラインステートの設定
    cmdList->SetPipelineState(pipelinestate.Get());
    // ルートシグネチャの設定
    cmdList->SetGraphicsRootSignature(rootsignature.Get());
    // プリミティブ形状を設定
    //cmdList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
    cmdList->IASetPrimitiveTopology(D3D_PRIMITIVE_TOPOLOGY_POINTLIST);
}

void Object3d::PostDraw()
{
    // コマンドリストを解除
    Object3d::cmdList = nullptr;
}

Object3d* Object3d::Create()
{
    // 3Dオブジェクトのインスタンスを生成
    Object3d* object3d = new Object3d();
    if (object3d == nullptr) {
        return nullptr;
    }

    // 初期化
    if (!object3d->Initialize()) {
        delete object3d;
        assert(0);
        return nullptr;
    }

    return object3d;
}

void Object3d::SetEye(XMFLOAT3 eye)
{
    Object3d::eye = eye;

    UpdateViewMatrix();
}

void Object3d::SetTarget(XMFLOAT3 target)
{
    Object3d::target = target;

    UpdateViewMatrix();
}

void Object3d::CameraMoveVector(XMFLOAT3 move)
{
    XMFLOAT3 eye_moved = GetEye();
    XMFLOAT3 target_moved = GetTarget();

    eye_moved.x += move.x;
    eye_moved.y += move.y;
    eye_moved.z += move.z;

    target_moved.x += move.x;
    target_moved.y += move.y;
    target_moved.z += move.z;

    SetEye(eye_moved);
    SetTarget(target_moved);
}

void Object3d::CameraMoveEyeVector(XMFLOAT3 move)
{
    XMFLOAT3 eye_moved = GetEye();

    eye_moved.x += move.x;
    eye_moved.y += move.y;
    eye_moved.z += move.z;

    SetEye(eye_moved);
}

void Object3d::InitializeDescriptorHeap()
{
    HRESULT result = S_FALSE;

    // デスクリプタヒープを生成	
    D3D12_DESCRIPTOR_HEAP_DESC descHeapDesc = {};
    descHeapDesc.Type = D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV;
    descHeapDesc.Flags = D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE;//シェーダから見えるように
    descHeapDesc.NumDescriptors = 1; // シェーダーリソースビュー1つ
    result = device->CreateDescriptorHeap(&descHeapDesc, IID_PPV_ARGS(&descHeap));//生成
    if (FAILED(result)) {
        assert(0);
    }

    // デスクリプタサイズを取得
    descriptorHandleIncrementSize = device->GetDescriptorHandleIncrementSize(D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV);

}

void Object3d::InitializeCamera(int window_width, int window_height)
{
    // ビュー行列の生成
    UpdateViewMatrix();

    // 平行投影による射影行列の生成
    //constMap->mat = XMMatrixOrthographicOffCenterLH(
    //	0, window_width,
    //	window_height, 0,
    //	0, 1);
    // 透視投影による射影行列の生成
    matProjection = XMMatrixPerspectiveFovLH(
        XMConvertToRadians(60.0f),
        (float)window_width / window_height,
        0.1f, 1000.0f
    );
}

void Object3d::InitializeGraphicsPipeline()
{
    HRESULT result = S_FALSE;
    ComPtr<ID3DBlob> vsBlob; // 頂点シェーダオブジェクト
    ComPtr<ID3DBlob> gsBlob; // ジオメトリシェーダオブジェクト
    ComPtr<ID3DBlob> psBlob;	// ピクセルシェーダオブジェクト
    ComPtr<ID3DBlob> errorBlob; // エラーオブジェクト

    // 頂点シェーダの読み込みとコンパイル
    result = D3DCompileFromFile(
        L"Resources/Shaders/BasicVertexShader.hlsl",	// シェーダファイル名
        nullptr,
        D3D_COMPILE_STANDARD_FILE_INCLUDE, // インクルード可能にする
        "main", "vs_5_0",	// エントリーポイント名、シェーダーモデル指定
        D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION, // デバッグ用設定
        0,
        &vsBlob, &errorBlob);
    if (FAILED(result)) {
        // errorBlobからエラー内容をstring型にコピー
        std::string errstr;
        errstr.resize(errorBlob->GetBufferSize());

        std::copy_n((char*)errorBlob->GetBufferPointer(),
            errorBlob->GetBufferSize(),
            errstr.begin());
        errstr += "\n";
        // エラー内容を出力ウィンドウに表示
        OutputDebugStringA(errstr.c_str());
        exit(1);
    }

    // ジオメトリシェーダの読み込みとコンパイル
    result = D3DCompileFromFile(
        L"Resources/Shaders/BasicGeometryShader.hlsl",	// シェーダファイル名
        nullptr,
        D3D_COMPILE_STANDARD_FILE_INCLUDE, // インクルード可能にする
        "main", "gs_5_0",	// エントリーポイント名、シェーダーモデル指定
        D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION, // デバッグ用設定
        0,
        &gsBlob, &errorBlob);
    if (FAILED(result)) {
        // errorBlobからエラー内容をstring型にコピー
        std::string errstr;
        errstr.resize(errorBlob->GetBufferSize());

        std::copy_n((char*)errorBlob->GetBufferPointer(),
            errorBlob->GetBufferSize(),
            errstr.begin());
        errstr += "\n";
        // エラー内容を出力ウィンドウに表示
        OutputDebugStringA(errstr.c_str());
        exit(1);
    }

    // ピクセルシェーダの読み込みとコンパイル
    result = D3DCompileFromFile(
        L"Resources/Shaders/BasicPixelShader.hlsl",	// シェーダファイル名
        nullptr,
        D3D_COMPILE_STANDARD_FILE_INCLUDE, // インクルード可能にする
        "main", "ps_5_0",	// エントリーポイント名、シェーダーモデル指定
        D3DCOMPILE_DEBUG | D3DCOMPILE_SKIP_OPTIMIZATION, // デバッグ用設定
        0,
        &psBlob, &errorBlob);
    if (FAILED(result)) {
        // errorBlobからエラー内容をstring型にコピー
        std::string errstr;
        errstr.resize(errorBlob->GetBufferSize());

        std::copy_n((char*)errorBlob->GetBufferPointer(),
            errorBlob->GetBufferSize(),
            errstr.begin());
        errstr += "\n";
        // エラー内容を出力ウィンドウに表示
        OutputDebugStringA(errstr.c_str());
        exit(1);
    }

    // 頂点レイアウト
    D3D12_INPUT_ELEMENT_DESC inputLayout[] = {
        { // xy座標(1行で書いたほうが見やすい)
            "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0,
            D3D12_APPEND_ALIGNED_ELEMENT,
            D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0
        },
        //{ // 法線ベクトル(1行で書いたほうが見やすい)
        //	"NORMAL", 0, DXGI_FORMAT_R32G32B32_FLOAT, 0,
        //	D3D12_APPEND_ALIGNED_ELEMENT,
        //	D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0
        //},
        //{ // uv座標(1行で書いたほうが見やすい)
        //	"TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT, 0,
        //	D3D12_APPEND_ALIGNED_ELEMENT,
        //	D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA, 0
        //},
    };

    // グラフィックスパイプラインの流れを設定
    D3D12_GRAPHICS_PIPELINE_STATE_DESC gpipeline{};
    gpipeline.VS = CD3DX12_SHADER_BYTECODE(vsBlob.Get());
    gpipeline.GS = CD3DX12_SHADER_BYTECODE(gsBlob.Get());
    gpipeline.PS = CD3DX12_SHADER_BYTECODE(psBlob.Get());

    // サンプルマスク
    gpipeline.SampleMask = D3D12_DEFAULT_SAMPLE_MASK; // 標準設定
    // ラスタライザステート
    gpipeline.RasterizerState = CD3DX12_RASTERIZER_DESC(D3D12_DEFAULT);
    //gpipeline.RasterizerState.CullMode = D3D12_CULL_MODE_NONE;
    //gpipeline.RasterizerState.FillMode = D3D12_FILL_MODE_WIREFRAME;
    // デプスステンシルステート
    gpipeline.DepthStencilState = CD3DX12_DEPTH_STENCIL_DESC(D3D12_DEFAULT);

    // レンダーターゲットのブレンド設定
    D3D12_RENDER_TARGET_BLEND_DESC blenddesc{};
    blenddesc.RenderTargetWriteMask = D3D12_COLOR_WRITE_ENABLE_ALL;	// RBGA全てのチャンネルを描画
    blenddesc.BlendEnable = true;
    blenddesc.BlendOp = D3D12_BLEND_OP_ADD;
    blenddesc.SrcBlend = D3D12_BLEND_SRC_ALPHA;
    blenddesc.DestBlend = D3D12_BLEND_INV_SRC_ALPHA;

    blenddesc.BlendOpAlpha = D3D12_BLEND_OP_ADD;
    blenddesc.SrcBlendAlpha = D3D12_BLEND_ONE;
    blenddesc.DestBlendAlpha = D3D12_BLEND_ZERO;

    // ブレンドステートの設定
    gpipeline.BlendState.RenderTarget[0] = blenddesc;
    gpipeline.BlendState.AlphaToCoverageEnable = false;	//透過ON

    // 深度バッファのフォーマット
    gpipeline.DSVFormat = DXGI_FORMAT_D32_FLOAT;

    // 頂点レイアウトの設定
    gpipeline.InputLayout.pInputElementDescs = inputLayout;
    gpipeline.InputLayout.NumElements = _countof(inputLayout);

    // 図形の形状設定（三角形）
    //gpipeline.PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE;
    gpipeline.PrimitiveTopologyType = D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT;

    gpipeline.NumRenderTargets = 1;	// 描画対象は1つ
    gpipeline.RTVFormats[0] = DXGI_FORMAT_R8G8B8A8_UNORM_SRGB; // 0〜255指定のRGBA
    gpipeline.SampleDesc.Count = 1; // 1ピクセルにつき1回サンプリング

    // デスクリプタレンジ
    CD3DX12_DESCRIPTOR_RANGE descRangeSRV;
    descRangeSRV.Init(D3D12_DESCRIPTOR_RANGE_TYPE_SRV, 1, 0); // t0 レジスタ

    // ルートパラメータ
    CD3DX12_ROOT_PARAMETER rootparams[2];
    rootparams[0].InitAsConstantBufferView(0, 0, D3D12_SHADER_VISIBILITY_ALL);
    rootparams[1].InitAsDescriptorTable(1, &descRangeSRV, D3D12_SHADER_VISIBILITY_ALL);

    // スタティックサンプラー
    CD3DX12_STATIC_SAMPLER_DESC samplerDesc = CD3DX12_STATIC_SAMPLER_DESC(0);

    // ルートシグネチャの設定
    CD3DX12_VERSIONED_ROOT_SIGNATURE_DESC rootSignatureDesc;
    rootSignatureDesc.Init_1_0(_countof(rootparams), rootparams, 1, &samplerDesc, D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT);

    ComPtr<ID3DBlob> rootSigBlob;
    // バージョン自動判定のシリアライズ
    result = D3DX12SerializeVersionedRootSignature(&rootSignatureDesc, D3D_ROOT_SIGNATURE_VERSION_1_0, &rootSigBlob, &errorBlob);
    // ルートシグネチャの生成
    result = device->CreateRootSignature(0, rootSigBlob->GetBufferPointer(), rootSigBlob->GetBufferSize(), IID_PPV_ARGS(&rootsignature));
    assert(SUCCEEDED(result));

    gpipeline.pRootSignature = rootsignature.Get();

    // グラフィックスパイプラインの生成
    result = device->CreateGraphicsPipelineState(&gpipeline, IID_PPV_ARGS(&pipelinestate));
    assert(SUCCEEDED(result));

}

void Object3d::LoadTexture()
{
    HRESULT result = S_FALSE;

    TexMetadata metadata{};
    ScratchImage scratchImg{};

    // WICテクスチャのロード
    result = LoadFromWICFile(L"Resources/keroBozu.png", WIC_FLAGS_NONE, &metadata, scratchImg);
    assert(SUCCEEDED(result));

    ScratchImage mipChain{};
    // ミップマップ生成
    result = GenerateMipMaps(
        scratchImg.GetImages(), scratchImg.GetImageCount(), scratchImg.GetMetadata(),
        TEX_FILTER_DEFAULT, 0, mipChain);
    if (SUCCEEDED(result)) {
        scratchImg = std::move(mipChain);
        metadata = scratchImg.GetMetadata();
    }

    // 読み込んだディフューズテクスチャをSRGBとして扱う
    metadata.format = MakeSRGB(metadata.format);

    // リソース設定
    CD3DX12_RESOURCE_DESC texresDesc = CD3DX12_RESOURCE_DESC::Tex2D(
        metadata.format, metadata.width, (UINT)metadata.height, (UINT16)metadata.arraySize,
        (UINT16)metadata.mipLevels);

    // ヒーププロパティ
    CD3DX12_HEAP_PROPERTIES heapProps =
        CD3DX12_HEAP_PROPERTIES(D3D12_CPU_PAGE_PROPERTY_WRITE_BACK, D3D12_MEMORY_POOL_L0);

    // テクスチャ用バッファの生成
    result = device->CreateCommittedResource(
        &heapProps, D3D12_HEAP_FLAG_NONE, &texresDesc,
        D3D12_RESOURCE_STATE_GENERIC_READ, // テクスチャ用指定
        nullptr, IID_PPV_ARGS(&texbuff));
    assert(SUCCEEDED(result));

    // テクスチャバッファにデータ転送
    for (size_t i = 0; i < metadata.mipLevels; i++) {
        const Image* img = scratchImg.GetImage(i, 0, 0); // 生データ抽出
        result = texbuff->WriteToSubresource(
            (UINT)i,
            nullptr,              // 全領域へコピー
            img->pixels,          // 元データアドレス
            (UINT)img->rowPitch,  // 1ラインサイズ
            (UINT)img->slicePitch // 1枚サイズ
        );
        assert(SUCCEEDED(result));
    }

    // シェーダリソースビュー作成
    cpuDescHandleSRV = CD3DX12_CPU_DESCRIPTOR_HANDLE(descHeap->GetCPUDescriptorHandleForHeapStart(), 0, descriptorHandleIncrementSize);
    gpuDescHandleSRV = CD3DX12_GPU_DESCRIPTOR_HANDLE(descHeap->GetGPUDescriptorHandleForHeapStart(), 0, descriptorHandleIncrementSize);

    D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc{}; // 設定構造体
    D3D12_RESOURCE_DESC resDesc = texbuff->GetDesc();

    srvDesc.Format = resDesc.Format;
    srvDesc.Shader4ComponentMapping = D3D12_DEFAULT_SHADER_4_COMPONENT_MAPPING;
    srvDesc.ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D;//2Dテクスチャ
    srvDesc.Texture2D.MipLevels = 1;

    device->CreateShaderResourceView(texbuff.Get(), //ビューと関連付けるバッファ
        &srvDesc, //テクスチャ設定情報
        cpuDescHandleSRV
    );

}

void Object3d::CreateModel()
{
    HRESULT result = S_FALSE;

    //四角形の頂点データ
    //VertexPosNormalUv verticesSquare[] = {
    //	{{-5.0f,-5.0f,0.0f},{0,0,1},{0,1}},//左下
    //	{{-5.0f,+5.0f,0.0f},{0,0,1},{0,0}},//左上
    //	{{+5.0f,-5.0f,0.0f},{0,0,1},{1,1}},//右下
    //	{{+5.0f,+5.0f,0.0f},{0,0,1},{1,0}},//右上
    //};
    //VertexPosNormalUv verticesPoint[] = {
    //	{{0.0f,0.0f,0.0f},{0,0,1},{0,1}}
    //};
    VertexPos verticesPoint[] = {
        {{0.0f,0.0f,0.0f}}
    };


    //メンバ変数にコピー
    //std::copy(std::begin(verticesSquare), std::end(verticesSquare), vertices);
    std::copy(std::begin(verticesPoint), std::end(verticesPoint), vertices);

    //四角形のインデックスデータ
    unsigned short indicesSquare[] = {
        0,1,2,//三角形1
        2,1,3,//三角形2
    };

    //メンバ変数にコピー
    //std::copy(std::begin(indicesSquare), std::end(indicesSquare), indices);

    UINT sizeVB = static_cast<UINT>(sizeof(vertices));

    // ヒーププロパティ
    CD3DX12_HEAP_PROPERTIES heapProps = CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_UPLOAD);
    // リソース設定
    CD3DX12_RESOURCE_DESC resourceDesc = CD3DX12_RESOURCE_DESC::Buffer(sizeVB);

    // 頂点バッファ生成
    result = device->CreateCommittedResource(
        &heapProps, D3D12_HEAP_FLAG_NONE, &resourceDesc, D3D12_RESOURCE_STATE_GENERIC_READ, nullptr,
        IID_PPV_ARGS(&vertBuff));
    assert(SUCCEEDED(result));

    // 頂点バッファへのデータ転送
    //VertexPosNormalUv* vertMap = nullptr;
    VertexPos* vertMap = nullptr;
    result = vertBuff->Map(0, nullptr, (void**)&vertMap);
    if (SUCCEEDED(result)) {
        memcpy(vertMap, vertices, sizeof(vertices));
        vertBuff->Unmap(0, nullptr);
    }

    // 頂点バッファビューの作成
    vbView.BufferLocation = vertBuff->GetGPUVirtualAddress();
    vbView.SizeInBytes = sizeof(vertices);
    vbView.StrideInBytes = sizeof(vertices[0]);

    //UINT sizeIB = static_cast<UINT>(sizeof(indices));
    // リソース設定
    //resourceDesc.Width = sizeIB;

    // インデックスバッファ生成
    //result = device->CreateCommittedResource(
    //	&heapProps, D3D12_HEAP_FLAG_NONE, &resourceDesc, D3D12_RESOURCE_STATE_GENERIC_READ, nullptr,
    //	IID_PPV_ARGS(&indexBuff));

    // インデックスバッファへのデータ転送
    unsigned short* indexMap = nullptr;
    //result = indexBuff->Map(0, nullptr, (void**)&indexMap);
    if (SUCCEEDED(result)) {

        // 全インデックスに対して
        //for (int i = 0; i < _countof(indices); i++)
        //{
        //	indexMap[i] = indices[i];	// インデックスをコピー
        //}

        //indexBuff->Unmap(0, nullptr);
    }

    // インデックスバッファビューの作成
    //ibView.BufferLocation = indexBuff->GetGPUVirtualAddress();
    //ibView.Format = DXGI_FORMAT_R16_UINT;
    //ibView.SizeInBytes = sizeof(indices);
}

void Object3d::UpdateViewMatrix()
{
    // ビュー行列の更新
    XMVECTOR eyePosition = XMLoadFloat3(&eye);			//視点座標
    XMVECTOR targetPosition = XMLoadFloat3(&target);	//注視点座標
    XMVECTOR upVector = XMLoadFloat3(&up);				//仮の上方向

    XMVECTOR cameraAxisZ = XMVectorSubtract(targetPosition, eyePosition);	//引き算

    assert(!XMVector3Equal(cameraAxisZ, XMVectorZero()));	//0じゃないか
    assert(!XMVector3IsInfinite(cameraAxisZ));				//無限じゃないか
    assert(!XMVector3Equal(upVector, XMVectorZero()));		//0じゃないか
    assert(!XMVector3IsInfinite(upVector));					//無限じゃないか

    cameraAxisZ = XMVector3Normalize(cameraAxisZ);	//正規化

    XMVECTOR cameraAxisX;
    cameraAxisX = XMVector3Cross(upVector, cameraAxisZ);	//外積使ってX軸求める

    cameraAxisX = XMVector3Normalize(cameraAxisX);	//正規化

    XMVECTOR cameraAxisY;
    cameraAxisY = XMVector3Cross(cameraAxisZ, cameraAxisX);	//外積使ってY軸求める

    XMMATRIX matCameraRot;	//カメラ回転行列
    //カメラ座標系→ワールド座標系の変換行列
    matCameraRot.r[0] = cameraAxisX;
    matCameraRot.r[1] = cameraAxisY;
    matCameraRot.r[2] = cameraAxisZ;
    matCameraRot.r[3] = XMVectorSet(0, 0, 0, 1);

    //逆行列求める
    matView = XMMatrixTranspose(matCameraRot);

    //視点座標に-1をかけた座標
    XMVECTOR reverseEyePosition = XMVectorNegate(eyePosition);	//反転
    //カメラの位置からワールド原点へのベクトル
    XMVECTOR tX = XMVector3Dot(cameraAxisX, reverseEyePosition);	//X成分
    XMVECTOR tY = XMVector3Dot(cameraAxisY, reverseEyePosition);	//Y成分
    XMVECTOR tZ = XMVector3Dot(cameraAxisZ, reverseEyePosition);	//Z成分
    //1つのベクトルにまとめる
    XMVECTOR translation = XMVectorSet(tX.m128_f32[0], tY.m128_f32[1], tZ.m128_f32[2], 1.0f);

    //ビュー行列に平行移動成分を設定
    matView.r[3] = translation;

#pragma region 全方向ビルボード行列の計算
    //ビルボード行列
    matBillboard.r[0] = cameraAxisX;
    matBillboard.r[1] = cameraAxisY;
    matBillboard.r[2] = cameraAxisZ;
    matBillboard.r[3] = XMVectorSet(0, 0, 0, 1);
#pragma endregion
#pragma region 全方向ビルボード行列の計算
    //カメラX軸、Y軸、Z軸
    XMVECTOR ybillCameraAxisX, ybillCameraAxisY, ybillCameraAxisZ;

    //X軸は共通
    ybillCameraAxisX = cameraAxisX;
    //Y軸はワールド座標系のY軸
    ybillCameraAxisY = XMVector3Normalize(upVector);
    //Z軸はX軸→Y軸の外積で求まる
    ybillCameraAxisZ = XMVector3Cross(ybillCameraAxisX, ybillCameraAxisY);

    //Y軸回りビルボード行列
    matBillboardY.r[0] = ybillCameraAxisX;
    matBillboardY.r[1] = ybillCameraAxisY;
    matBillboardY.r[2] = ybillCameraAxisZ;
    matBillboardY.r[3] = XMVectorSet(0, 0, 0, 1);
#pragma endregion
}

bool Object3d::Initialize()
{
    // nullptrチェック
    assert(device);

    // ヒーププロパティ
    CD3DX12_HEAP_PROPERTIES heapProps = CD3DX12_HEAP_PROPERTIES(D3D12_HEAP_TYPE_UPLOAD);
    // リソース設定
    CD3DX12_RESOURCE_DESC resourceDesc =
        CD3DX12_RESOURCE_DESC::Buffer((sizeof(ConstBufferData) + 0xff) & ~0xff);

    HRESULT result;

    // 定数バッファの生成
    result = device->CreateCommittedResource(
        &heapProps, // アップロード可能
        D3D12_HEAP_FLAG_NONE, &resourceDesc, D3D12_RESOURCE_STATE_GENERIC_READ, nullptr,
        IID_PPV_ARGS(&constBuff));
    assert(SUCCEEDED(result));

    return true;
}

void Object3d::Update()
{
    HRESULT result;
    XMMATRIX matScale, matRot, matTrans;

    // スケール、回転、平行移動行列の計算
    matScale = XMMatrixScaling(scale.x, scale.y, scale.z);
    matRot = XMMatrixIdentity();
    matRot *= XMMatrixRotationZ(XMConvertToRadians(rotation.z));	//ビルボードの時はローカル回転をZ軸のみに限定
    matTrans = XMMatrixTranslation(position.x, position.y, position.z);

    // ワールド行列の合成
    matWorld = XMMatrixIdentity(); // 変形をリセット

    matWorld *= matScale;	//ワールド行列にスケーリングを反映
    matWorld *= matRot;		//ワールド行列に回転を反映

    if (isYBillboard)
    {
        //matWorld *= matBillboardY;	//Y軸ビルボード行列をかける
    }
    else
    {
        //matWorld *= matBillboard;	//ビルボード行列をかける
    }

    matWorld *= matTrans;	//ワールド行列に平行移動を反映

    // 親オブジェクトがあれば
    if (parent != nullptr) {
        // 親オブジェクトのワールド行列を掛ける
        matWorld *= parent->matWorld;
    }

    // 定数バッファへデータ転送
    ConstBufferData* constMap = nullptr;
    result = constBuff->Map(0, nullptr, (void**)&constMap);
    //constMap->color = color;
    //constMap->mat = matWorld * matView * matProjection;	// 行列の合成
    constMap->mat = matView * matProjection;
    constBuff->Unmap(0, nullptr);
}

void Object3d::Draw()
{
    // nullptrチェック
    assert(device);
    assert(Object3d::cmdList);

    // 頂点バッファの設定
    cmdList->IASetVertexBuffers(0, 1, &vbView);
    // インデックスバッファの設定
    //cmdList->IASetIndexBuffer(&ibView);

    // デスクリプタヒープの配列
    ID3D12DescriptorHeap* ppHeaps[] = { descHeap.Get() };
    cmdList->SetDescriptorHeaps(_countof(ppHeaps), ppHeaps);

    // 定数バッファビューをセット
    cmdList->SetGraphicsRootConstantBufferView(0, constBuff->GetGPUVirtualAddress());
    // シェーダリソースビューをセット
    cmdList->SetGraphicsRootDescriptorTable(1, gpuDescHandleSRV);
    // 描画コマンド
    //cmdList->DrawIndexedInstanced(_countof(indices), 1, 0, 0, 0);
    //cmdList->DrawIndexedInstanced(3, 1, 0, 0, 0);
    cmdList->DrawInstanced(_countof(vertices), 1, 0, 0);
}